# Copyright 2011 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

Note: This test doesn't really need to use an isolated vat; but it has proven
useful as dogfooding.

  ? pragma.syntax("0.9")
  
  ? interp.setTopScope(<elang:syntax.makeEParser>(<file:envinit.e>.getTwine()).evalToPair(privilegedScope)[1]);
  
  ? def makeMurepl := <murepl:makeMurepl>
  # value: <makeMurepl>
  
  ? var mureplFacet := null
  > def makeTransport1(m) {
  >   stderr.println("makeTransport1 called")
  >   mureplFacet := m
  >   mureplFacet.connected()
  > }
  
  ? def printLog := <import:org.switchb.e.murepl.makeRepl>.makeLogPrinter(stdout)  
  
  
  
  ? def murepl := makeMurepl(["t1" => makeTransport1], [].asMap(), makeIsolatedVat, println)
  # stderr: makeTransport1 called
  #         
  
  # value: <murepl>
  
  ? def r := mureplFacet.repl("#foo") <- eval("def x := 1 + 1", "Alice")
  > interp.waitAtTop(r)
  ? printLog(r[0], r[1])
  # stdout: # value: 2
  #         
  #         
  
  ? def r := mureplFacet.repl("#foo") <- eval("x + 1", "Bob")
  > interp.waitAtTop(r)
  ? printLog(r[0], r[1])
  # stdout: # value: 3
  #         
  #         
  ? def r := mureplFacet.repl("#bar") <- eval("x + 1", "Bob")
  > interp.waitAtTop(r)
  ? printLog(r[0], r[1])
  # stdout: # problem: problem: Failed: Undefined variable: x
  #         
  #         

Deliberate reset; the variable is now undefined:

  ? mureplFacet.reset("#foo")
  > def r := mureplFacet.repl("#foo") <- eval("x + 1", "Bob")
  > interp.waitAtTop(r)
  ? printLog(r[0], r[1])
  # stdout: # problem: problem: Failed: Undefined variable: x
  #         
  #         
  

--- Reconnecting

  ? mureplFacet.disconnected()
  # stderr: makeTransport1 called
  #         
  
  XXX test backoff/reconnect on connection failure/fast failure