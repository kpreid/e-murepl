  ? pragma.syntax("0.9")

  ? interp.setTopScope(<elang:syntax.makeEParser>(<file:murepl.e>.getTwine()).evalToPair(privilegedScope)[1]);

--- Test case: eval, orderly shutdown

  ? def [ic, oc] := makeIsolatedVat([].asMap())
  # value: [<Promise>, <outerController>]

  ? interp.waitAtTop(ic)

  ? def t := oc.terminates()
  # value: <Promise>

  ? interp.waitAtTop(def r := ic <- seed(e`1 + 1`))
  ? r
  # value: 2
  
  ? t
  # value: <Promise>

  ? ic <- orderlyShutdown()

  ? interp.waitAtTop(t)
  ? t
  # value: 0
  
  ? ic
  # value: <ref disconnected by problem: <EOFException>>

--- Test case: killing

  ? def [ic, oc] := makeIsolatedVat([].asMap())
  # value: [<Promise>, <outerController>]

  ? def r := ic <- seed(e`while (true) {}`)
  # value: <Promise> 
  
  ? interp.waitAtTop(timer.whenPast(timer.now() + 2000, fn {}))
  
  ? oc.terminates() # check process still running
  # value: <Promise>
  
  ? r # check didn't bogusly return
  # value: <Promise>

  ? oc.kill()

  ? interp.waitAtTop(oc.terminates())
  ? oc.terminates()
  # value: 143
  
XXX this should work but doesn't:
  x ? interp.waitAtTop(Ref.whenBroken(ic, fn _ {}))
  x ? ic
  x # value: <ref disconnected by problem: <EOFException>>

--- Test case: CPU time expiry

  ? def [ic, oc] := makeIsolatedVat(["cpuSeconds" => 20])
  # value: [<Promise>, <outerController>]

  ? interp.waitAtTop(ic) # wait for startup to be done

  ? def r := ic <- seed(e`while (true) {}`)
  # value: <Promise> 
  
  ? interp.waitAtTop(timer.whenPast(timer.now() + 1000, fn {}))
  
  ? oc.terminates() # check process still running
  # value: <Promise>

  ? interp.waitAtTop(oc.terminates())
  ? oc.terminates()
  # value: 152
