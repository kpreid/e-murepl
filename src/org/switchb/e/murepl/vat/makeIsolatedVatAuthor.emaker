# Copyright 2011 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def getResourcePath := <import:org.switchb.e.murepl.util.getResourcePath>

def makeIsolatedVatAuthor(<unsafe>, props, jRuntime, introducer, identityMgr, stdout, stderr, seedVat) {
  def classpath := props["java.class.path"]
  def limitToolPath := getResourcePath(meta.context(), "limit.sh")
  def System := <unsafe:java.lang.makeSystem>
  def makeOutputStreamWriter := <unsafe:java.io.makeOutputStreamWriter>
  
  return def makeIsolatedVat {
    to run(label :String, limits :Map[String, int]) {
      
      # Convert limits into system ulimit options
      var limitCodes := []
      for parameter => value in limits {
        switch (parameter) {
          match =="cpuSeconds" {
            limitCodes += ["-l", "-t", E.toString(value)]
          }
        }
      }
      
      # A promise for the remote vat's internal controller
      def [remoteRcvr, remoteResolver] := Ref.promise()
      
      # SturdyRef to the resolver for bootstrapping communication
      def [bootstrapSR, bootstrapCancel, _] :=
        identityMgr.makeKnown(remoteResolver)
      def bootstrapURL := introducer.sturdyToURI(bootstrapSR)
      
      # Start actual subprocess
      def process := <unsafe:java.lang.makeRuntime>.getRuntime().exec(
        [limitToolPath] + limitCodes + ["--", classpath, bootstrapURL, label],
        null,
        null)

      # Mainly for debugging...
      # raw* are guaranteed not to be the updoc output streams
      def rawStderr := makeOutputStreamWriter(System.getErr())
      def rawStdout := makeOutputStreamWriter(System.getOut())
      process.attachStderr(rawStderr)
      process.attachStdout(rawStdout)
      
      def [processExitCodeVow, tvat] := process.terminates()
      
      # Clean up upon process shutdown
      when (processExitCodeVow) -> {} catch _ {} finally {
        rawStderr.flush()
        rawStdout.flush()
        bootstrapCancel()
        tvat.orderlyShutdown()
        remoteResolver.resolveRace(
          if (Ref.isBroken(processExitCodeVow)) {
            processExitCodeVow
          } else {
            Ref.broken(`Isolated vat $label: process unexpectedly terminated`)
          })
        # process.abort()
      }
      
      # Revoke bootstrap sturdyref as soon as it has been used
      when (remoteRcvr) -> {} catch _ {} finally {
        bootstrapCancel()
      }
              
      def outerController {
        to kill() {
          process.destroy()
        }
        to terminates() {
          return processExitCodeVow
        }
      }
      
      return [remoteRcvr, outerController]
    }
  }
}