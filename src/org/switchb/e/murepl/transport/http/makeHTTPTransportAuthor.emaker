# Copyright 2011 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def getResourcePath := <import:org.switchb.e.murepl.util.getResourcePath>
def makeEHttpServlet := <import:org.switchb.e.murepl.transport.http.makeEHttpServlet>
def makeRepl := <import:org.switchb.e.murepl.makeRepl>

interface Html {}
def html__quasiParser {
  to valueMaker(template) {
    def strTemplate := simple__quasiParser.valueMaker(template);
    return def htmlTemplate {
      to substitute(args) {
        def escArgs := [].diverge()
        for arg in args {
          escArgs.push(if (arg =~ h :Html) {
            h.asText()
          } else {
            E.toString(arg).replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("\"", "&quot;").replaceAll("'", "&apos;")
          })
        }
        def str := strTemplate.substitute(escArgs.snapshot())
        return def html implements Html {
          to __printOn(out) {
            out.print("<html {{{", str, "}}}>")
          }
          to asText() { return str }
        }
      }
    }
  }
}

def pageHeaderTemplate() { return html`
<html><head>
<title>MUREPL</title>
<link rel='stylesheet' href='murepl.css' type='text/css'>
<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js'></script>
<script src='murepl.js'></script>

</head><body onload='murepl_init()'>

<div id='out'>
`}

def pageFooterTemplate(logmarkKey) { return html`
</div>
<form id='form' action='' onsubmit='ajax(); return false' method='post'>
  <input type='hidden' name='log' value='$logmarkKey'>
  <div class='murepl-prompt-line'>? <span><input id='input' type='text' name='src' size=80 class='murepl-prompt-input'></span>
  </div>
</form>

</body></html>
`}

def makeHTTPTransportAuthor(<unsafe>) {
  def makeDefaultHandler := <unsafe:org.mortbay.jetty.handler.makeDefaultHandler>
  def makeResourceHandler := <unsafe:org.mortbay.jetty.handler.makeResourceHandler>
  def makeHandlerList := <unsafe:org.mortbay.jetty.handler.makeHandlerList>
  def makeServer := <unsafe:org.mortbay.jetty.makeServer>
  def makeServletHolder := <unsafe:org.mortbay.jetty.servlet.makeServletHolder>
  def makeServletContext := <unsafe:org.mortbay.jetty.servlet.makeContext>
  def makeOutputStreamWriter := <unsafe:java.io.makeOutputStreamWriter>

  /** Given the murepl facet, construct the repl servlet. */
  def makeReplServlet(murepl) {
    def repl := murepl.repl("web")
    def head := repl <- getLogHead()

    # TODO: this is un-persistent state...
    var logmarkKeyCounter := 0
    def logmarks := [0 => head].diverge()

    return makeEHttpServlet(def eservlet {
      to GET(request, response) {
        response.setStatus(200)
        response.setContentType("text/html; charset=utf-8")
        def s := makeOutputStreamWriter(response.getOutputStream())

        # TODO: permit GET evals in fresh environment
        # (Or at least complain explicitly if there's a src= parameter)
        
        def includePage := request.getParameter("noout") != "1"
        
        var logmark := if (request.getParameter("log") != null) {
          logmarks[__makeInt(request.getParameter("log"))]
        } else {
          head
        }

        if (includePage) {
          s."write(String)"(pageHeaderTemplate().asText())
        }

        def slk
        
        # TODO: We could skip this string buffer if we had a Writer
        # adapter which HTML-escaped.
        def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
        def stopped := makeRepl.makeLogPrinter(tw)(logmark, null)
        logmarks[bind slk := logmarkKeyCounter += 1] := stopped
        s."write(String)"(html`<pre>${sb.snapshot()}</pre>`.asText())

        if (includePage) {
          s."write(String)"(pageFooterTemplate(slk).asText())
        } else {
          # This embedded info is used by murepl.js to update the log pointer in the form.
          s."write(String)"(html`<form id="logmark"><input type="hidden" name="log" value="$slk"></form>`.asText())
        }
        s.close()
      }

      to POST(request, response) {
        def done
        if ((def src := request.getParameter("src")) != null) {
          when (repl <- eval(src, "web user")) -> {
            bind done := true
          }
        } else {
          bind done := true
        }
        
        return when (done) -> { eservlet.GET(request, response) }
      }
    })
  }

  return def makeHTTPTransport(port :(0..!(2**16))) {
    return def connect(murepl) {
      
      def server := makeServer(port)

      def staticPath := getResourcePath(meta.context(), `static/`)
      def staticFiles := makeResourceHandler()
      staticFiles.setResourceBase(staticPath)

      def servletsContext := makeServletContext(server, "/", makeServletContext.getNO_SESSIONS())
      servletsContext.addServlet(
        makeServletHolder(makeReplServlet(murepl)), "/repl")
      
      def handlerList := makeHandlerList()
      handlerList.setHandlers([
        staticFiles,
        servletsContext,
        makeDefaultHandler()])
      server.setHandler(handlerList)
      server.start()
    }
  }
}
