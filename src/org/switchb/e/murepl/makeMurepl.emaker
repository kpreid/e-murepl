# Copyright 2011 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def makeInitPool := <import:org.switchb.e.murepl.makeInitPool>

# transport states
def CONNECTING {}
def CONNECTED {}
def DISCONNECTED {}

def makeMurepl(transportDefs :Map[String, any], makeIsolatedVat, trace) {
  var labelCounter := 0
  def makeReplVat := makeInitPool(def _makeReplVat() { 
    def label := `murepl-${labelCounter += 1}`
    trace(`Making vat $label`)
    
    def [ic, oc] := makeIsolatedVat(label, [].asMap())
    
    def repl := ic <- seed(e`fn label {
      <import:org.switchb.e.murepl.makeRepl>(
        <unsafe:org.erights.e.elang.scope.makeScope>,
        ``pragma.syntax("0.9")``,
        [],
        [],
        label
      )
    }`) <- (label)
    
    return def replRecord {
      to repl() { return repl }
      to inner() { return ic }
      to outer() { return oc }
    }
  }, 1)
  
  def transports := [].asMap().diverge()
  def repls := [].asMap().diverge()
  
  def initTransport(transportKey) {
    def maker := transportDefs[transportKey]
    def toGlobalKey(forumKey) { 
      return [transportKey, forumKey]
    }
    
    var state := CONNECTING
    
    def transportFace {
      /**
       * Report that the transport has successfully connected (is ready to
       * receive requests).
       */
      to connected() :void {
        state := CONNECTED
      }
      
      /**
       * Report that the transport has disconnected (will be remade and
       * reinitialized according to the reconnection schedule).
       */
      to disconnected() :void {
        state := DISCONNECTED
        initTransport <- (transportKey)
      }
      
      /**
       * Return or create the repl for the given forum key. The forum key
       * is some data which identifies a persistent source of evaluation 
       * requests, which will all share the same environment.
       */
      to repl(forumKey :Data) :rcvr {
        def key := toGlobalKey(forumKey)
        return repls.fetch(key, fn {
          repls[key] := makeReplVat()
        }).repl()
      }

      /**
       * Kill the repl for the named forum.
       *
       * XXX This interface should distinguish wiping persistent state vs.
       * killing a hung vat to unwedge.
       */
      to reset(forumKey :Data) :void {
        def key := toGlobalKey(forumKey)
        if (repls.maps(key)) {
          # XXX Add and use an orderly-shutdown-or-kill operation, to reduce log noise.
          def oc := repls[key].outer()
          repls.removeKey(key)
          oc.kill()
        }
      }
    }
    
    transports[transportKey] := maker(transportFace)
  }
  
  for key => _ in transportDefs {
    initTransport(key)
  }
  
  def murepl {
    
  }
  
  return murepl
}